<?php

namespace Bersi\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    public function getArticlesByCategory(array $categoryNames, $start, $nbArticle)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->join('a.category', 'c')
            ->addSelect('c')
            ->where('a.published = :publish')
            ->setParameter('publish', true)
            ->andWhere($qb->expr()->in('c.name', $categoryNames))
            ->setMaxResults($nbArticle)
            ->setFirstResult($start)
            ->orderBy('a.date', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function getArticlesBy($fieldName, $value)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->where('a.published = :publish')
            ->setParameter('publish', true)
            ->andWhere("a.$fieldName = :$fieldName")
            ->setParameter($fieldName, $value)
            ->orderBy('a.date', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function getAllArticlesPublish($categoryNames = null)
    {
        $qb = $this->createQueryBuilder('a');

        if ($categoryNames == null) {
            $qb->select('count(a.id)')
                ->where('a.published = :publish')
                ->setParameter('publish', true);
        } else {
            $qb->select('count(a.id)')
                ->join('a.category', 'c')
                ->where('a.published = :publish')
                ->setParameter('publish', true)
                ->andWhere($qb->expr()->in('c.name', $categoryNames));
        }

        return $qb->getQuery()->getResult()[0][1];
    }

    public function search($search)
    {
        $qb = $this->createQueryBuilder('a');

        $qb ->where('a.title LIKE :title')
            ->orWhere('a.content LIKE :content')
            ->orWhere('a.introduction LIKE :introduction')
            ->andWhere('a.published = :publish')
            ->setParameters([
                'title'         => '%' . $search. '%',
                'content'       => '%' . $search. '%',
                'introduction'  => '%' . $search. '%',
                'publish'       => true
            ]);
        return $qb->getQuery()->getResult();
    }
}
